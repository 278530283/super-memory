// src/lib/stores/useAuthStore.ts
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Models } from 'appwrite';
import { create } from 'zustand';
import { persist, PersistStorage } from 'zustand/middleware';
import authService from '../services/authService';
import userService from '../services/userService';


// 创建符合 Zustand StateStorage 接口的存储适配器
const storage: PersistStorage<Partial<AuthState>> = {
  getItem: async (name: string) => {
    try {
      const value = await AsyncStorage.getItem(name);
      if (value === null) return null;
      
      // 解析存储的值
      return JSON.parse(value);
    } catch (error) {
      console.warn('AsyncStorage getItem error:', error);
      return null;
    }
  },
  
  setItem: async (name: string, value: any) => {
    try {
      // 序列化值
      const stringValue = JSON.stringify(value);
      await AsyncStorage.setItem(name, stringValue);
    } catch (error) {
      console.warn('AsyncStorage setItem error:', error);
    }
  },
  
  removeItem: async (name: string) => {
    try {
      await AsyncStorage.removeItem(name);
    } catch (error) {
      console.warn('AsyncStorage removeItem error:', error);
    }
  }
};


interface AuthState {
  user: Models.User<Models.Preferences> | null;
  loading: boolean;
  error: string | null;
  login: (phone: string, password: string) => Promise<void>;
  register: (phone: string, password: string, name: string) => Promise<void>;
  logout: () => Promise<void>;
  updatePreferences: (updates: Partial<Models.Preferences>) => Promise<void>;
  clearError: () => void;
}

const useAuthStore = create<AuthState>()(
  persist(
    (set, get) => ({
      user: null,
      loading: false,
      error: null,
      login: async (phone, password) => {
        set({ loading: true, error: null });
        try {
          const user = await authService.login(phone, password);
          set({ user, loading: false });
        } catch (error: any) {
          set({ error: error.message || 'Login failed', loading: false });
          throw error;
        }
      },
      
      register: async (phone, password, name) => {
        set({ loading: true, error: null });
        try {
          const user = await authService.register(phone, password, name);
          set({ user, loading: false });
        } catch (error: any) {
          set({ error: error.message || 'Registration failed', loading: false });
          throw error;
        }
      },
      
      logout: async () => {
        set({ loading: true, error: null });
        try {
          await authService.logout();
          set({ user: null, loading: false });
        } catch (error: any) {
          set({ error: error.message || 'Logout failed', loading: false });
          set({ user: null });
        }
      },
      
      updatePreferences: async (updates) => {
        set({ loading: true, error: null });
        try {
          const user = await userService.updatePreferences(updates);
          set({ user, loading: false });
        } catch (error: any) {
          set({ error: error.message || 'Failed to update preferences', loading: false });
          throw error;
        }
      },
      
      clearError: () => set({ error: null }),
    }),
    {
      name: 'auth-storage',
      storage: storage, // 使用符合 StateStorage 接口的存储适配器
      partialize: (state) => ({ 
        user: state.user
      }),
    }
  )
);

export default useAuthStore;