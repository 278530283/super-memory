// src/app/(tabs)/today/[sessionId]/test/[type]/index.tsx
import ListenWord from '@/src/components/features/TestTypes/ListenWord';
import TranslateEnToZh from '@/src/components/features/TestTypes/TranslateEnToZh';
import wordService from '@/src/lib/services/wordService';
import useDailyLearningStore from '@/src/lib/stores/useDailyLearningStore';
import { useLocalSearchParams, useRouter } from 'expo-router';
import React, { useEffect, useState } from 'react';
import { ActivityIndicator, Alert, StyleSheet, Text, View } from 'react-native';
// Import other test components as they are created
// import SpellingTest from ...
// import PronunciationTest from ...


export default function TestScreen() {
  const router = useRouter();
  // Get route params
  const { sessionId, type } = useLocalSearchParams<{ sessionId: string; type: string }>();
  const { session, loading: sessionLoading, error: sessionError } = useDailyLearningStore();

  // State for the current word being tested and the list of words for this phase
  const [currentWordIndex, setCurrentWordIndex] = useState(0);
  const [wordList, setWordList] = useState<any[]>([]); // Use Word type later
  const [isLoading, setIsLoading] = useState(true);

  // 动态生成标题
  const getTitle = () => {
    const titleMap: Record<string, string> = {
      pre_test: "前置评测",
      post_test: "当日评测",
      listen: "听力测试",
      translate: "翻译测试",
    };
    return titleMap[type || ''] || "单词评测";
  };

  // --- Fetch word list based on session and type ---
  useEffect(() => {
    const fetchWords = async () => {
      if (!sessionId || !type || !session || session.$id !== sessionId) {
        // Wait for session to load or ensure it matches the route
        setIsLoading(false);
        return;
      }

      let wordIds: string[] = [];
      let progressField: 'pre_test_progress' | 'post_test_progress' | null = null;

      switch (type) {
        case 'pre_test':
          wordIds = session.pre_test_word_ids || [];
          progressField = 'pre_test_progress';
          break;
        case 'post_test':
          wordIds = session.post_test_word_ids || [];
          progressField = 'post_test_progress';
          break;
        // Add 'learning' case if needed, though it might be different
        default:
          console.error(`Unsupported test type: ${type}`);
          setIsLoading(false);
          return;
      }

      if (wordIds.length === 0) {
        Alert.alert('提示', '没有找到需要评测的单词。');
        router.back(); // Or navigate to a completion screen
        return;
      }

      // Fetch actual Word details from wordService using wordIds
      const fetchedWords = await wordService.getWordsBySpellings(wordIds);

      setWordList(fetchedWords);
      setIsLoading(false);

      // --- Initialize progress in session if needed ---
      // This could be done here or in the parent component when starting the phase
      // const total = wordIds.length;
      // if (session[progressField] === null || session[progressField]?.startsWith('0/')) {
      //     useDailyLearningStore.getState().updateSessionProgress(sessionId, { [progressField]: `0/${total}` });
      // }
    };

    fetchWords();
  }, [sessionId, type, session]); // Re-run if sessionId, type, or session changes

  // --- Handle answer submission from test components ---
  const handleAnswer = (result: { type: string; correct: boolean; /* ...other data */ }) => {
    // 1. Record the action in the log
    // useDailyLearningStore.getState().recordWordAction({
    //   userId: session?.user_id, // Get from store
    //   wordId: wordList[currentWordIndex].$id,
    //   sessionId: sessionId,
    //   actionType: type === 'pre_test' ? 1 : 3, // 1=前置评测, 3=当日评测
    //   phase: type === 'pre_test' ? 1 : 3,
    //   activityType: getActivityType(result.type), // Map component type to activity type
    //   isCorrect: result.correct,
    //   responseTimeMs: result.responseTime, // If provided
    //   speedUsed: result.speedUsed, // If provided
    //   // ... other relevant data from result
    // });

    // 2. Update session progress
    const total = wordList.length;
    const nextIndex = currentWordIndex + 1;
    const progressField = type === 'pre_test' ? 'pre_test_progress' : 'post_test_progress';
    useDailyLearningStore.getState().updateSessionProgress(sessionId!, { [progressField]: `${nextIndex}/${total}` });

    // 3. Move to next word or finish
    if (nextIndex < wordList.length) {
      setCurrentWordIndex(nextIndex);
    } else {
      // Finish test - update session status if needed, navigate back or show summary
      console.log(`${type} finished for session ${sessionId}`);
      Alert.alert('完成', `${type === 'pre_test' ? '前置评测' : '当日评测'}已完成！`);
      // Update session status based on type
      // if (type === 'pre_test') {
      //   useDailyLearningStore.getState().updateSessionProgress(sessionId!, { status: 1 }); // Or 2 if learning starts immediately
      // } else if (type === 'post_test') {
      //   useDailyLearningStore.getState().updateSessionProgress(sessionId!, { status: 4 });
      //   // TODO: Trigger creation of learning_record and learning_words
      // }
      router.back(); // Navigate back to today's main screen
      // Or push to a summary screen: router.push(`/(tabs)/today/${sessionId}/summary`);
    }
  };

  // --- Render the appropriate test component ---
  const renderTestComponent = () => {
    const currentWord = wordList[currentWordIndex];
    if (!currentWord) return null;

    // TODO: Logic to determine the exact test type based on word history/level
    // This is a simplified placeholder based on the route 'type' param
    switch (type) {
      case 'listen':
        return <ListenWord word={currentWord} onAnswer={handleAnswer} />;
      case 'translate':
        return <TranslateEnToZh word={currentWord} onAnswer={handleAnswer} />;
      // Add cases for other types like 'spelling', 'pronunciation'
      default:
        // Fallback or dynamic determination based on word.level/history
        // For now, defaulting to a common test type
        return <TranslateEnToZh word={currentWord} onAnswer={handleAnswer} />;
    }
  };

  // --- Render ---
  if (sessionLoading || isLoading) {
    return (
      <View style={styles.center}>
        <ActivityIndicator size="large" />
        <Text>加载评测内容...</Text>
      </View>
    );
  }

  if (sessionError) {
    return (
      <View style={styles.center}>
        <Text>加载失败: {sessionError}</Text>
      </View>
    );
  }

  if (wordList.length === 0 || !session) {
    return (
      <View style={styles.center}>
        <Text>未找到评测内容。</Text>
      </View>
    );
  }

  const total = wordList.length;
  const current = currentWordIndex + 1;

  return (
    <View style={styles.container}>
      {/* Top Bar */}
      <Head>
        <title>{getTitle()}</title>
      </Head>
      <View style={styles.topBar}>
        <Text style={styles.progressText}>{current}/{total}</Text>
        {/* { <TouchableOpacity onPress={() => {  HandlePause  }}>
          <Text style={styles.pauseButton}>⏸️</Text>
        </TouchableOpacity> } */}
      </View>

      {/* Test Area */}
      <View style={styles.testArea}>
        {renderTestComponent()}
      </View>

      {/* Bottom Controls (if needed, often handled by test components) */}
      {/* <View style={styles.bottomControls}>
        // Navigation or submit buttons if not handled by component
      </View> */}
    </View>
  );
}

// Helper function to map component type to activity type (placeholder)
// const getActivityType = (componentType: string): number => {
//   switch(componentType) {
//     case 'listen': return 1; // 听单词
//     case 'translate': return 2; // 英译中
//     case 'spell': return 4; // 拼写
//     case 'pronounce': return 5; // 跟读
//     default: return 10; // Default or unknown
//   }
// };

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff', // White background for test screen
  },
  topBar: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 15,
    backgroundColor: '#f0f0f0', // Light gray top bar
    borderBottomWidth: 1,
    borderBottomColor: '#ddd',
  },
  progressText: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  pauseButton: {
    fontSize: 20,
  },
  testArea: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  center: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});